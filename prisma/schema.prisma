// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Airport {
  id Int @id @default(autoincrement())
  name String
  city String
  cityCode String
  country String
  continent String
  iataCode String
  flightsDeparture Flight[] @relation("departureAirport")
  flightsArrival Flight[] @relation("arrivalAirport")
}

model Airline {
  id Int @id @default(autoincrement())
  name String
  country String
  iataCode String
  logoUrl String?
  flights Flight[]
}

model Flight {
  id Int @id @default(autoincrement())
  departureAirportId Int
  arrivalAirportId Int
  airlineId Int
  flightNumber String
  flightType String?
  departureAirport Airport @relation("departureAirport", fields: [departureAirportId], references: [id])
  arrivalAirport Airport @relation("arrivalAirport", fields: [arrivalAirportId], references: [id])
  airline Airline @relation(fields: [airlineId], references: [id])
  Schedule Schedule[]
  Baggage Baggage?
  FlightService FlightService[]
}

model Baggage {
  id Int @id @default(autoincrement())
  flightId Int @unique
  maxBaggageWeight Int?
  maxCabinBaggageWeight Int
  flight Flight @relation(fields: [flightId], references: [id])
}

model Service {
  id Int @id @default(autoincrement())
  title String
  FlightService FlightService[]
}

model FlightService {
  id Int @id @default(autoincrement())
  flightId Int
  serviceId Int
  flight Flight @relation(fields: [flightId], references: [id])
  service Service @relation(fields: [serviceId], references: [id])
}

model Schedule {
  id Int @id @default(autoincrement())
  flightId Int
  departureDateTime DateTime
  arrivalDateTime DateTime
  duration Int
  ticketPrice Int
  seatAvailability Int
  seatClass String
  terminalGate String
  flight Flight @relation(fields: [flightId], references: [id])
  Seat Seat[]
  ItinerarySchedule ItinerarySchedule[]
  Notification Notification[]
}

model ItinerarySchedule {
  id Int @id @default(autoincrement())
  itineraryId Int
  scheduleId Int
  tripDirection String @default("Outbound")
  itinerary Itinerary @relation(fields: [itineraryId], references: [id])
  schedule Schedule @relation(fields: [scheduleId], references: [id])
}

model Itinerary {
  id Int @id @default(autoincrement())
  bookingId Int @unique
  journeyType String
  booking Booking @relation(fields: [bookingId], references: [id])
  ItinerarySchedule ItinerarySchedule[]
}

model Booking {
  id Int @id @default(autoincrement())
  userId Int
  bookingCode String @unique
  date DateTime
  status String @default("Unpaid")
  user User @relation(fields: [userId], references: [id])
  Passenger Passenger[]
  Itinerary Itinerary?
  BookedSeat BookedSeat[]
  Invoice Invoice?
  Notification Notification[]
}

model Seat {
  id Int @id @default(autoincrement())
  scheduleId Int
  seatNumber String
  schedule Schedule @relation(fields: [scheduleId], references: [id])
  BookedSeat BookedSeat?
}

model BookedSeat {
  id Int @id @default(autoincrement())
  seatId Int @unique
  bookingId Int
  seat Seat @relation(fields: [seatId], references: [id])
  booking Booking @relation(fields: [bookingId], references: [id])
  Passenger Passenger?
}

model Passenger {
  id Int @id @default(autoincrement())
  bookingId Int
  bookedSeatId Int @unique
  ageGroup String
  title String
  fullName String
  familyName String?
  birthDate DateTime
  nationality String
  identityNumber String
  issuingCountry String?
  expiryDate DateTime?
  booking Booking @relation(fields: [bookingId], references: [id])
  bookedSeat BookedSeat @relation(fields: [bookedSeatId], references: [id])
}

model Invoice {
  id Int @id @default(autoincrement())
  bookingId Int @unique
  subtotal Int
  taxAmount Int
  totalAmount Int
  paymentDueDateTime DateTime
  booking Booking @relation(fields: [bookingId], references: [id])
  Payment Payment?
}

model Payment {
  id Int @id @default(autoincrement())
  invoiceId Int @unique
  date DateTime
  method String
  accountNumber String
  holderName String?
  CVV String?
  expiryDate String?
  invoice Invoice @relation(fields: [invoiceId], references: [id])
  Notification Notification[]
}

model User {
  id Int @id @default(autoincrement())
  email String @unique
  phoneNumber String @unique
  googleId String?
  password String?
  fullName String
  passwordResetToken String?
  passwordResetTokenExpirationTime DateTime?
  role String @default("Buyer")
  Booking Booking[]
  Notification Notification[]
}

model Notification {
  id Int @id @default(autoincrement())
  userId Int
  bookingId Int?
  scheduleId Int?
  paymentId Int?
  title String
  message String
  createdAt DateTime @default(now())
  readStatus Boolean @default(false)
  user User @relation(fields: [userId], references: [id])
  booking Booking? @relation(fields: [bookingId], references: [id])
  schedule Schedule? @relation(fields: [scheduleId], references: [id])
  payment Payment? @relation(fields: [paymentId], references: [id])
}